# -*- coding: utf-8 -*-
"""Proyecto 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AnvGA-E5gT_lauYwgXpDqE9sNWKGHzEr
"""

import numpy as np

import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

class Grafica():
  #Para la matriz de ayacencia
  def __init__(self, nodos, arcos):
    #Descripción del constructor
    self.matriz = np.zeros((len(nodos),len(nodos)))
    for x in arcos:
      self.matriz[x[0],x[1]] = 1

  def __str__(self):
    return str(self.matriz)

def creacion_pd(nombre_del_archivo):

#Cargamos el archivo de excel de las páginas citadas
  df = pd.read_excel("/content/drive/MyDrive/paginas_citadas.xlsx")
  Nodos = (list(range(len(df["Index"]))))
  x = list(df["Cited by"])
  Arcos = []
  for i in range(len(x)):
    for j in x[i].split(','):
      Arcos.append((int(j) - 1,i))
  return Grafica(Nodos, Arcos)

#Obtenemos la matriz
matrix = creacion_pd("paginas_citadas.xlsx").matriz

#Hacemos el valor de cada fila para que esté entre 0 y 1
for i in range(len(matrix)):
  matrix[i, :] = matrix[i, :]/matrix[i, :].sum()

pi = np.ones((1, len(matrix))) / len(matrix)
pi_1 = pi @ matrix

#Repite el proceso de while hasta que converja
while np.linalg.norm(pi - pi_1) > 1e-6:
    pi = pi_1
    pi_1 = pi @ matrix

# Imprime el vector final de PageRank
print("Vector de PageRank π:", pi_1)

#Para la pregunta 2
import numpy as np
from google.colab import drive
import pandas as pd
drive.mount('/content/drive')
class Grafica():
    def __init__(self, nodos, arcos):
        self.matriz = np.zeros((len(nodos),len(nodos)))
        for x in arcos:
            self.matriz[x[0],x[1]] = 1

    def __str__(self):
        return str(self.matriz)

def creacion_pd(nombre_del_archivo):
    df = pd.read_excel("/content/drive/MyDrive/paginas_citadas.xlsx")
    Nodos = (list(range(len(df["Index"]))))
    x = list(df["Cited by"])
    Arcos = []
    for i in range(len(x)):
        for j in x[i].split(','):
            Arcos.append((int(j) - 1,i))
    return Grafica(Nodos, Arcos)

matrix = creacion_pd("/content/drive/MyDrive/paginas_citadas.xlsx").matriz

for i in range(len(matrix)):
    matrix[i, :] = matrix[i, :]/matrix[i, :].sum()

ru_indices = [16, 17, 18, 19, 20, 21, 22, 23, 24, 25]  # Índices de las páginas .ru
nodos_total = len(matrix)
s = len(ru_indices)

#Deifnimos el nuevo vector pi
pi = np.zeros((1, nodos_total))

#Asinamos 1/s a las páginas con terminación .ru
for idx in ru_indices:
    pi[0, idx] = 1 / s

pi_1 = pi @ matrix

while np.linalg.norm(pi - pi_1) > 1e-6:
    pi = pi_1
    pi_1 = pi @ matrix

print("Nuevo Vector pi:", pi_1)

#Para la pregunta 3
import numpy as np
from google.colab import drive
import pandas as pd
drive.mount('/content/drive')

class Grafica():
    """Matriz de adyacencia"""
    def __init__(self, nodos, arcos):
        """Descripción del constructor"""
        self.matriz = np.zeros((len(nodos),len(nodos)))
        for x in arcos:
            self.matriz[x[0],x[1]] = 1

    def __str__(self):
        return str(self.matriz)

def construccion_pd(nombre_del_archivo):
    df = pd.read_excel("/content/drive/MyDrive/paginas_citadas.xlsx")
    Nodos = (list(range(len(df["Index"]))))
    x = list(df["Cited by"])
    Arcos = []
    for i in range(len(x)):
        for j in x[i].split(','):
            Arcos.append((int(j) - 1,i))
    return Grafica(Nodos, Arcos)

matrix = construccion_pd("/content/drive/MyDrive/paginas_citadas.xlsx").matriz

for i in range(len(matrix)):
    matrix[i, :] = matrix[i, :]/matrix[i, :].sum()

# Definimos la matriz U
n = len(matrix)
U = np.ones((n, n)) / n

#Función para calcular la ecuación
def calcular_pagerank(d):
    pi = np.ones((1, n)) / n  #Nuestro vector inicial
    while True:
        pi_1 = pi @ (d * matrix + (1 - d) * U)
        if np.linalg.norm(pi - pi_1) < 1e-6:
            break
        pi = pi_1
    return pi_1

#Valor para d dado
ds = [0.5, 0.85, 1]

resultados = {}
for d in ds:
    pi_resultado = calcular_pagerank(d)
    resultados[d] = pi_resultado

for d, resultado in resultados.items():
    print(f"Vector de PageRank para d = {d}:\n", resultado)